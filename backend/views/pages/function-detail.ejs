<!DOCTYPE html>
<html lang="en">
<head>
  <%- include('../partials/head') %>
  <title><%= fn.event_name %> - Function Detail</title>
</head>
<body>
  <%- include('../partials/header', { active: 'functions', user: user }) %>

  <main class="main-content">
    <!-- Header -->
    <div class="function-header">
      <h1 class="function-title"><%= fn.event_name %></h1>
      <div class="function-actions">
        <a href="/functions/<%= fn.id %>/edit" class="btn">Edit Function</a>
      </div>
    </div>

    <!-- Tabs Bar -->
    <div class="tabs-bar">
      <a href="?tab=info" class="active">Info</a>
      <a href="?tab=tasks">Tasks</a>
      <a href="?tab=notes">Notes</a>
      <a href="?tab=proposal">Proposal</a>
    </div>

    <!-- GRID LAYOUT -->
    <div class="function-layout">

     <!-- üßç CONTACTS COLUMN -->
<div class="card contact-panel">
  <h3>Contacts</h3>

  <div id="contactInfo" class="contact-card-list">
    <% if (linkedContacts.length > 0) { %>
      <% linkedContacts.forEach(c => { %>
      <div class="contact-card <%= c.is_primary ? 'primary' : '' %>">
  <div class="contact-avatar"><%= c.name.charAt(0).toUpperCase() %></div>

  <div class="contact-details">
    <div class="contact-name">
      <strong><%= c.name %></strong>
      <% if (c.is_primary) { %>
        <span class="primary-badge" title="Primary Contact">‚≠ê</span>
      <% } %>
    </div>
    <div class="contact-email"><a href="mailto:<%= c.email %>"><%= c.email %></a></div>
    <div class="contact-phone"><%= c.phone || '' %></div>
  </div>

  <div class="contact-actions">
    <button class="menu-btn" data-id="<%= c.id %>">‚ãÆ</button>
    <div class="menu-dropdown hidden" id="menu-<%= c.id %>">
      <button class="menu-item edit-btn" data-id="<%= c.id %>">Edit</button>
      <% if (!c.is_primary) { %>
        <button class="menu-item primary-btn" data-id="<%= c.id %>">Make Primary</button>
      <% } %>
      <button class="menu-item remove-btn" data-id="<%= c.id %>">Remove from Function</button>
      <button class="menu-item delete-btn" data-id="<%= c.id %>">Delete</button>
      <button class="menu-item view-btn" data-id="<%= c.id %>">View</button>
    </div>
  </div>
</div>

      <% }) %>
    <% } else { %>
      <p>No contacts assigned yet.</p>
    <% } %>
  </div>

  <!-- ‚ûï Floating Add Button -->
  <button class="add-contact-fab" id="addContactBtn">+</button>
</div>


      <!-- üìã MAIN DETAILS COLUMN -->
      <div class="detail-panel">
        <div class="card function-section">
          <h3>Event Details</h3>
          <p><strong>Status:</strong> <%= fn.status %></p>
          <p><strong>Date:</strong> <%= formatNZDate(fn.event_date) %> at <%= fn.event_time || 'TBC' %></p>
          <p><strong>Attendees:</strong> <%= fn.attendees || '‚Äî' %></p>
          <p><strong>Total:</strong> $<%= fn.totals_price || 0 %></p>
          <p><strong>Room:</strong> <%= fn.room_name || '‚Äî' %></p>
          <p><strong>Notes:</strong> <%= fn.notes || 'No notes yet' %></p>
        </div>

        <div class="card function-section">
          <h3>Tasks</h3>
          <% if (!tasks.length) { %>
            <p>No tasks yet.</p>
          <% } else { %>
            <ul class="task-list">
              <% tasks.forEach(t => { %>
                <li><strong><%= t.title %></strong> ‚Äî <%= t.status %></li>
              <% }) %>
            </ul>
          <% } %>
        </div>

        <div class="card function-section">
          <h3>Notes</h3>
          <% if (!notes.length) { %>
            <p>No notes yet.</p>
          <% } else { %>
            <ul class="note-list">
              <% notes.forEach(n => { %>
                <li><strong><%= formatNZDate(n.created_at) %>:</strong> <%= n.content %></li>
              <% }) %>
            </ul>
          <% } %>
        </div>
      </div>
    </div>
  </main>

<!-- üí¨ Slide-in Add/Edit Contact Panel -->
<div id="contactPanel" class="contact-edit-panel">
  <h3 id="contactPanelTitle">Add Contact</h3>

  <input type="hidden" id="contactPanelMode" value="add">
  <input type="hidden" id="editContactId">

  <!-- Mode Tabs -->
  <div class="contact-panel-tabs">
    <button id="modeExisting" class="tab-btn active">Existing Contact</button>
    <button id="modeNew" class="tab-btn">New Contact</button>
  </div>

  <!-- Existing Contact Section -->
  <div id="existingContactSection">
    <input
      type="text"
      id="existingContactSearch"
      placeholder="Search existing contacts..."
      class="contact-search"
    >
    <select id="existingContactSelect" size="8" class="contact-dropdown"></select>

    <button id="linkExistingBtn" class="btn" style="margin-top: 10px;">Link Selected</button>
  </div>

  <!-- New Contact Section -->
  <div id="newContactSection" class="hidden">
    <input type="text" id="newContactName" placeholder="Name" required>
    <input type="email" id="newContactEmail" placeholder="Email" required>
    <input type="text" id="newContactPhone" placeholder="Phone">
    <input type="text" id="newContactCompany" placeholder="Company">
    <button type="button" id="saveNewContactBtn" class="btn">Save Contact</button>
  </div>

  <div class="panel-actions">
    <button type="button" id="closePanel" class="btn ghost">Cancel</button>
  </div>
</div>

<!-- Overlay -->
<div id="panelOverlay" class="panel-overlay"></div>




<!-- üí° INTERACTION SCRIPT -->
<script>
const fnId = "<%= fn.id %>";

// === PANEL & OVERLAY ===
const panel = document.getElementById('contactPanel');
const overlay = document.getElementById('panelOverlay');
const modeExisting = document.getElementById('modeExisting');
const modeNew = document.getElementById('modeNew');
const existingSection = document.getElementById('existingContactSection');
const newSection = document.getElementById('newContactSection');

// --- Toggle 3-dot menus ---
document.addEventListener('click', (e) => {
  document.querySelectorAll('.menu-dropdown').forEach(d => d.classList.add('hidden'));
  if (e.target.classList.contains('menu-btn')) {
    e.stopPropagation();
    document.getElementById(`menu-${e.target.dataset.id}`).classList.toggle('hidden');
  }
});

// --- Overlay control ---
function closePanel() { panel.classList.remove('show'); overlay.classList.remove('show'); }
document.getElementById('closePanel').addEventListener('click', closePanel);
overlay.addEventListener('click', closePanel);

// --- Open Add Panel ---
document.getElementById('addContactBtn').addEventListener('click', () => {
  resetForm();
  document.getElementById('contactPanelTitle').textContent = 'Add Contact';
  document.getElementById('contactPanelMode').value = 'add';
  panel.classList.add('show');
  overlay.classList.add('show');
  modeNew.click();
});

// --- Switch between existing/new modes ---
modeExisting.addEventListener('click', () => {
  modeExisting.classList.add('active');
  modeNew.classList.remove('active');
  existingSection.classList.remove('hidden');
  newSection.classList.add('hidden');
});
modeNew.addEventListener('click', () => {
  modeNew.classList.add('active');
  modeExisting.classList.remove('active');
  existingSection.classList.add('hidden');
  newSection.classList.remove('hidden');
});

// --- Load contacts for dropdown ---
async function loadContacts() {
  const res = await fetch('/functions/api/contacts');
  const data = await res.json();
  const select = document.getElementById('existingContactSelect');
  select.innerHTML = '';
  data.forEach(c => {
    const opt = document.createElement('option');
    opt.value = c.id;
    opt.textContent = `${c.name} (${c.email})`;
    select.appendChild(opt);
  });
}
loadContacts();

// --- Filter dropdown search ---
document.getElementById('existingContactSearch').addEventListener('input', e => {
  const term = e.target.value.toLowerCase();
  document.querySelectorAll('#existingContactSelect option').forEach(opt => {
    opt.style.display = opt.textContent.toLowerCase().includes(term) ? '' : 'none';
  });
});

// --- Link existing contact ---
document.getElementById('linkExistingBtn').addEventListener('click', async () => {
  const contactId = document.getElementById('existingContactSelect').value;
  if (!contactId) return alert('Select a contact.');
  const res = await fetch(`/functions/${fnId}/link-contact`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ contact_id: contactId })
  });
  const data = await res.json();
  if (data.success) location.reload();
  else alert('Failed to link contact.');
});

// --- Save new or edited contact ---
document.getElementById('saveNewContactBtn').addEventListener('click', async () => {
  const mode = document.getElementById('contactPanelMode').value;
  const id = document.getElementById('editContactId').value;
  const name = document.getElementById('newContactName').value.trim();
  const email = document.getElementById('newContactEmail').value.trim();
  const phone = document.getElementById('newContactPhone').value.trim();
  const company = document.getElementById('newContactCompany').value.trim();

  if (!name || !email) return alert('Name and email are required.');

  let url, method;
  if (mode === 'edit') {
    url = `/functions/contacts/${id}/update`;
    method = 'POST';
  } else {
    url = `/functions/${fnId}/new-contact`;
    method = 'POST';
  }

  const res = await fetch(url, {
    method,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ name, email, phone, company })
  });
  const data = await res.json();
  if (data.success) location.reload();
  else alert(data.message || 'Error saving contact.');
});

// --- Edit contact from 3-dot menu ---
document.addEventListener('click', (e) => {
  if (!e.target.classList.contains('edit-btn')) return;
  const card = e.target.closest('.contact-card');
  const id = e.target.dataset.id;
  const name = card.querySelector('.contact-name strong').textContent;
  const email = card.querySelector('.contact-email a').textContent;
  const phone = card.querySelector('.contact-phone').textContent || '';
  const company = card.querySelector('.contact-company')?.textContent || '';

  document.getElementById('contactPanelTitle').textContent = 'Edit Contact';
  document.getElementById('contactPanelMode').value = 'edit';
  document.getElementById('editContactId').value = id;
  document.getElementById('newContactName').value = name;
  document.getElementById('newContactEmail').value = email;
  document.getElementById('newContactPhone').value = phone;
  document.getElementById('newContactCompany').value = company;

  panel.classList.add('show');
  overlay.classList.add('show');
  modeNew.click();
});

// --- Delete contact ---
document.addEventListener('click', async (e) => {
  if (!e.target.classList.contains('delete-btn')) return;
  const id = e.target.dataset.id;
  if (!confirm('Delete this contact permanently?')) return;
  const res = await fetch(`/functions/contacts/${id}/delete`, { method: 'DELETE' });
  const data = await res.json();
  if (data.success) location.reload();
  else alert('Error deleting contact.');
});

// --- Set primary ---
document.addEventListener('click', async (e) => {
  if (!e.target.classList.contains('primary-btn')) return;
  const id = e.target.dataset.id;
  const res = await fetch(`/functions/${fnId}/set-primary`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ contact_id: id })
  });
  const data = await res.json();
  if (data.success) location.reload();
  else alert('Error setting primary contact.');
});

function resetForm() {
  ['newContactName','newContactEmail','newContactPhone','newContactCompany'].forEach(id =>
    document.getElementById(id).value = ''
  );
}
// === VIEW CONTACT ===
document.addEventListener('click', (e) => {
  if (!e.target.classList.contains('view-btn')) return;
  const btn = e.target;
  const card = btn.closest('.contact-card');
  const name = card.querySelector('.contact-name strong').textContent;
  const email = card.querySelector('.contact-email a').textContent;
  const phone = card.querySelector('.contact-phone').textContent;

  alert(`üë§ ${name}\nüìß ${email}\nüìû ${phone}`);
});

</script>



</body>
</html>





