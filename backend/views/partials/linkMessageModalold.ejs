<!-- views/partials/linkMessageModal.ejs -->
<div class="modal fade" id="linkMessageModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content p-4">
      <h4>üîó Link Message</h4>

      <div id="alert-area"></div>

      <form action="/inbox/link/<%= message.id %>" method="POST" id="linkMessageForm">
        <!-- CONTACT SELECT -->
        <div class="form-group mb-3">
          <label for="contact_id">Contact</label>
          <select name="contact_id" id="contact_id" class="form-control">
            <option value="">(none)</option>
            <% contacts.forEach(c => { %>
              <option 
  value="<%= c.id %>" 
  <%= String(message.related_contact || '') === String(c.id || '') ? 'selected' : '' %>>
  <%= c.name %>
</option>

            <% }) %>
          </select>
        </div>

        <!-- FUNCTION SELECT -->
        <div class="form-group mb-3">
          <label for="function_id">Function</label>
          <select name="function_id" id="function_id" class="form-control" <%= functions.length ? '' : 'disabled' %>>
            <% if (functions.length) { %>
              <option value="">(none)</option>
              <% functions.forEach(f => { %>
                <option 
  value="<%= f.id %>" 
  <%= String(message.related_function || '') === String(f.id || '') ? 'selected' : '' %>>
  <%= f.event_name %>
</option>

              <% }) %>
            <% } else { %>
              <option value="">(select contact first)</option>
            <% } %>
          </select>
        </div>

        <div id="link-status" class="text-muted small mt-1"></div>

        <div class="modal-footer d-flex justify-content-between">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">üíæ Save Link</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", async () => {
  const form = document.getElementById("linkMessageForm");
  const contactSelect = document.getElementById("contact_id");
  const functionSelect = document.getElementById("function_id");
  const statusDiv = document.getElementById("link-status");
  const alertArea = document.getElementById("alert-area");

  const messageId = "<%= message.id %>";
  const prelinkedContact = "<%= message.related_contact || '' %>";
  const prelinkedFunction = "<%= message.related_function || '' %>";

  // üîß Utility: show Bootstrap alert
  function showAlert(type, text) {
    alertArea.innerHTML = `
      <div class="alert alert-${type} alert-dismissible fade show" role="alert">
        ${text}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      </div>`;
  }

  // Disable function select if not populated
  if (!functionSelect.options.length || functionSelect.options[0].value === "") {
    functionSelect.disabled = true;
  }

  // üß† Auto-load functions if a contact is already linked
  if (prelinkedContact) {
    try {
      const res = await fetch(`/inbox/api/functions/by-contact/${prelinkedContact}`);
      const data = await res.json();

      if (Array.isArray(data) && data.length > 0) {
        functionSelect.innerHTML = '<option value="">(none)</option>';
        data.forEach(f => {
          const opt = document.createElement("option");
          opt.value = f.id;
          opt.textContent = f.event_name;
          if (String(f.id) === String(prelinkedFunction)) opt.selected = true;
          functionSelect.appendChild(opt);
        });
        functionSelect.disabled = false;
      } else {
        functionSelect.innerHTML = '<option value="">(no functions linked to this contact)</option>';
        functionSelect.disabled = true;
      }
    } catch (err) {
      console.error("‚ùå Prefill failed:", err);
    }
  }

  // üß© Dynamic contact ‚Üí function filter
  contactSelect.addEventListener("change", async (e) => {
    const contactId = e.target.value;
    functionSelect.innerHTML = "";
    functionSelect.disabled = true;
    statusDiv.textContent = "";

    if (!contactId) {
      functionSelect.innerHTML = '<option value="">(select contact first)</option>';
      return;
    }

    functionSelect.innerHTML = '<option value="">Loading functions...</option>';
    statusDiv.textContent = "Fetching linked functions...";

    try {
      const res = await fetch(`/inbox/api/functions/by-contact/${contactId}`);
      const data = await res.json();

      if (!Array.isArray(data) || data.length === 0) {
        functionSelect.innerHTML = '<option value="">(no functions linked to this contact)</option>';
        functionSelect.disabled = true;
        statusDiv.textContent = "‚ö†Ô∏è No linked functions found.";
        return;
      }

      functionSelect.innerHTML = '<option value="">(none)</option>';
      data.forEach(f => {
        const opt = document.createElement("option");
        opt.value = f.id;
        opt.textContent = f.event_name;
        functionSelect.appendChild(opt);
      });

      functionSelect.disabled = false;
      statusDiv.textContent = `‚úÖ ${data.length} linked function${data.length > 1 ? 's' : ''} found.`;
    } catch (err) {
      console.error("‚ùå Failed to load functions:", err);
      functionSelect.innerHTML = '<option value="">(error loading functions)</option>';
      functionSelect.disabled = true;
      statusDiv.textContent = "‚ùå Error loading functions.";
    }
  });

  // üíæ Handle link submission (Final Stable Version)
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const contact_id = formData.get("contact_id");
    const function_id = formData.get("function_id");
    const action = form.getAttribute("action");

    statusDiv.textContent = "Saving link...";

    try {
      const response = await fetch(action, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contact_id, function_id }),
      });
      const result = await response.json();

      if (result.success) {
        showAlert("success", "Message linked successfully!");
        statusDiv.textContent = "‚úÖ Message linked successfully!";

        // üßπ Close modal safely and redirect to message body
        const modalEl = document.getElementById("linkMessageModal");
        modalEl.classList.remove("fade"); // remove animation to avoid AbortError
        const modalInstance = bootstrap.Modal.getInstance(modalEl) || new bootstrap.Modal(modalEl);
        modalInstance.hide();

        // ‚úÖ Always go back to message detail
        setTimeout(() => {
          window.location.assign(`/inbox/${messageId}`);
        }, 400);
      } else {
        showAlert("danger", result.error || "Failed to link message.");
        statusDiv.textContent = "‚ùå Failed to link message.";
      }
    } catch (err) {
      console.error("‚ùå Link request failed:", err);
      showAlert("danger", "An error occurred while linking this message.");
      statusDiv.textContent = "‚ùå An error occurred.";
    }
  });
});
</script>




